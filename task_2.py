#2. Выполнить логические побитовые операции «И», «ИЛИ» и др. над числами 5 и 6.
# Выполнить над числом 5 побитовый сдвиг вправо и влево на два знака.
# Объяснить полученный результат.

print(f'\n5 = {bin(5)} bit\n6 = {bin(6)} bit\n'
       '\nВыберете одну логическую побитовую операцию и нажмите соответствую ей цифру: ')

answer = (int(input('1 - "И"\n'
                    '2 - "ИЛИ"\n'
                    '3 - "исключающее ИЛИ"\n'
                    '4 - "НЕ"\n'
                    '5 - побитовый сдвиг 5 на два знака\n'
                    '>> ')))

if answer == 1:
    # логическая побитовая операция "И"
    # сравниваем биты :
    # 1 & 0 = 0
    # 0 & 1 = 0
    # 1 & 1 = 1
    # 0 & 0 = 0
    print(f'5 & 6:\n{5 & 6} == {bin(5 & 6)} bit\n')

if answer == 2:
    # логическая побитовая операция "ИЛИ"
    # 1 | 0 = 1
    # 0 | 1 = 1
    # 1 | 1 = 1
    # 0 | 0 = 0
    print(f'5 | 6:\n{5 | 6} == {bin(5 | 6)} bit\n')

if answer == 3:
    # Логическая операция "исключающее ИЛИ" (OR(XOR))
    # 1 ^ 0 = 1
    # 0 ^ 1 = 1
    # 1 ^ 1 = 0
    # 0 ^ 0 = 0
    print(f'5 ^ 6:\n{5 ^ 6} == {bin(5 ^ 6)} bit\n')

if answer == 4:
    # Логическая операция "НЕ"
    # ~ n == -(n + 1)
    number = int(input('Для числа "5" нажмите 5\n'
                       'Для числа "6" нажмите 6\n'
                       '>> '))
    if number == 5:
        print(f'~ 5:\n{~ 5} == {bin(~ 5)} bit')
    if number == 6:
        print(f'~ 6:\n{~ 6} == {bin(~ 6)} bit')

if answer == 5:
    # побитовый сдвиг 5 вправо и влево на два знака.
    # a >>(<<) n
    # все биты числа a сдвигаются на n позиций вправо(или влево).
    # уходящий бит исчезает, не влияя на оставшиеся биты, а на месте появившегося бита записывается бит 0.
    route = int(input('Для сдвига вправо нажмите 1\n'
                       'Для сдвига влево нажмите 2\n'
                       '>> '))
    if route == 1:
        # 101
        # >> 101 = 001 = 1
        print(f'5 >> 2:\n{5 >> 2} == {bin(5 >> 2)} bit')
    if route == 2:
        #   101
        # 101 << = 10100
        print(f'5 << 2:\n{5 << 2} == {bin(5 << 2)} bit')